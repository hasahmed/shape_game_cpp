8/25/19
Currently not sure where we are in terms of progress. Check trello.

Current Goals:
    - Make the game in ../shapegame-examples/main.cpp run without running into
      errors.
      Current error is a heap-user-after-free main.cpp.
      Now that I see that actually it looks like it might
      be an error in the game code...

        - Upon further inspection it seems as though the code that causes issue
          lies in calling object->kill() in the main.cpp file of example.
          - This is undoubtly a logical error in the example file.
            The object that kill is attempting to be called on was likely removed
            from the list, and thus freed. Double check logic.
          - It seems then that calling

7/20/2020:
    No idea where we are at


7/21/2020:
    Currently trying to get circles to work in the Circle.hpp/cpp, and main.test.cpp files
        The current issue is... well not sure. Tried to add all the triangles that the circle needs to be created, but its clearly not working.
        Next steps for breakdown might be just draw the first triangle of the circle and see if we can get that to go right?

7/21/2020:
   Still working on trying to get circle drawing working, and just reached a
   breakthrough. The is a circle-esque thing that I have gotten to draw, but it
   is objectivly wrong. Could be an issue with Ben's algorithm, but could
   also be an issue with the way I'm drawing triangles. To get to the bottom
   of this I recommend that you draw the triangles generated on paper to try to get
   to the bottom of this. A deeper underlying issue is that you don't know the order
   in which triangles are drawn by your own game engine!!!!! You should get to the
   bottom of that one too

7/22/2020:
    Got Circles working!!!! Just needed to convert degrees to radians and do a
    couple other things with the algorithm

7/22/2020:
	Got the algorithm issues sorted out and everything is looking good with circles! Still to do with circles,
	- optimize using opengls traingle fan function
	- automatically deduce the fidelity based on circle size

7/22/2020:
	everything is working well, started working on recreating my snake game. Thinking about anti-aliasing, and trying to
	match the snake game. Its clear that the engine needs an option for settings the anti-aliasing properties along with
	potentially other engine properties


7/28/2020:
  Got the library working with windows as a compiled static library along with headers and opengl

7/28/2020:
  Added the boilerplate for rotation. Now just need to call the
  rotation method on each point before converting them to a vertex.
  Also need to implement the rotation method

  See: VertexHandler.cpp::triangleVerts
    Object.hpp/cpp
